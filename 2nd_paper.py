# -*- coding: utf-8 -*-
"""2nd_paper.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rrFQ0M09XnlOu1Rb6B3wtL__dGRo_6TO
"""

import matplotlib.pyplot as plt
import numpy as np

# Example dummy data (replace these with your actual data)
epochs = np.arange(1, 55 + 1)
train_acc = np.random.normal(0.95, 0.02, size=len(epochs))
val_acc = np.random.normal(0.94, 0.015, size=len(epochs))

# Confidence intervals (simulate small std deviation here)
train_std = np.random.uniform(0.005, 0.01, size=len(epochs))
val_std = np.random.uniform(0.005, 0.01, size=len(epochs))

# Early stopping point (example: epoch 18)
early_stop_epoch = 18
early_stop_val = val_acc[early_stop_epoch - 1]

# Find epoch of max validation accuracy
max_val_idx = np.argmax(val_acc)
max_val_epoch = epochs[max_val_idx]
max_val = val_acc[max_val_idx]

# Plotting
plt.figure(figsize=(10, 6))
plt.plot(epochs, train_acc, label='Train Accuracy', color='royalblue', linewidth=2, marker='o', markersize=5)
plt.plot(epochs, val_acc, label='Validation Accuracy', color='darkorange', linewidth=2, marker='s', markersize=5)

# Shaded confidence interval
plt.fill_between(epochs, train_acc - train_std, train_acc + train_std, color='royalblue', alpha=0.2)
plt.fill_between(epochs, val_acc - val_std, val_acc + val_std, color='darkorange', alpha=0.2)

# Early stopping marker
plt.axvline(x=early_stop_epoch, color='gray', linestyle='--', linewidth=1.5, label='Early Stopping')
plt.scatter(early_stop_epoch, early_stop_val, color='red', s=80, zorder=5)
plt.text(early_stop_epoch + 1, early_stop_val - 0.02, f'Early Stop\n(Epoch {early_stop_epoch})', fontsize=10, color='red')

# Max validation accuracy annotation
plt.scatter(max_val_epoch, max_val, color='green', s=80, zorder=5)
plt.text(max_val_epoch - 4, max_val + 0.015, f'Max Val Acc\n{max_val:.2%}', fontsize=10, color='green')

# Labels and legends
plt.xlabel('Epoch', fontsize=14, fontweight='bold')
plt.ylabel('Accuracy', fontsize=14, fontweight='bold')
plt.title('Training and Validation Accuracy with Confidence Intervals', fontsize=16, fontweight='bold')
plt.legend(fontsize=12)
plt.grid(True)
plt.tight_layout()
plt.savefig("enhanced_accuracy_plot.png", dpi=300)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Sample dummy data (replace with your actual values)
epochs = np.arange(1, 56)
train_acc = np.random.normal(0.96, 0.01, size=len(epochs))
val_acc = np.random.normal(0.95, 0.015, size=len(epochs))

# Simulated confidence intervals
train_std = np.random.uniform(0.003, 0.008, size=len(epochs))
val_std = np.random.uniform(0.004, 0.009, size=len(epochs))

# Early stopping epoch (for example, epoch 18)
early_stop_epoch = 18
early_stop_val = val_acc[early_stop_epoch - 1]

# Maximum validation accuracy
max_val_idx = np.argmax(val_acc)
max_val_epoch = epochs[max_val_idx]
max_val = val_acc[max_val_idx]

# Plotting
plt.figure(figsize=(10, 6))

# Training accuracy
plt.plot(epochs, train_acc, label='Train Accuracy', color='blue', linewidth=2)
plt.fill_between(epochs, train_acc - train_std, train_acc + train_std, color='blue', alpha=0.2)

# Validation accuracy
plt.plot(epochs, val_acc, label='Validation Accuracy', color='orange', linewidth=2)
plt.fill_between(epochs, val_acc - val_std, val_acc + val_std, color='orange', alpha=0.2)

# Early stopping vertical line and point
plt.axvline(x=early_stop_epoch, linestyle='--', color='gray', linewidth=1.5, label='Early Stopping')
plt.scatter(early_stop_epoch, early_stop_val, color='red', s=80, zorder=5)
plt.text(early_stop_epoch + 1, early_stop_val - 0.02, f"Early Stop\nEpoch {early_stop_epoch}",
         fontsize=12, color='red', weight='bold')

# Max validation accuracy annotation
plt.scatter(max_val_epoch, max_val, color='green', s=80, zorder=5)
plt.text(max_val_epoch - 4, max_val + 0.015, f"Max Val Acc\n{max_val:.2%}",
         fontsize=12, color='green', weight='bold')

# Labels with enhanced font sizes
plt.xlabel("Epoch", fontsize=16, fontweight='bold')
plt.ylabel("Accuracy", fontsize=16, fontweight='bold')
plt.title("Model Accuracy over Epochs", fontsize=18, fontweight='bold')

# Ticks font size
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)

# Legend with larger font
plt.legend(fontsize=13)

# Grid, layout, and save
plt.grid(True)
plt.tight_layout()
plt.savefig("accuracy_plot_with_labels_and_annotations.png", dpi=300)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Dummy data (replace with real values)
epochs = np.arange(1, 56)
train_acc = np.random.normal(0.96, 0.01, size=len(epochs))
val_acc = np.random.normal(0.95, 0.015, size=len(epochs))

train_std = np.random.uniform(0.003, 0.008, size=len(epochs))
val_std = np.random.uniform(0.004, 0.009, size=len(epochs))

# Early stopping info
early_stop_epoch = 18
early_stop_val = val_acc[early_stop_epoch - 1]

# Max validation accuracy
max_val_idx = np.argmax(val_acc)
max_val_epoch = epochs[max_val_idx]
max_val = val_acc[max_val_idx]

# Plot
fig, ax = plt.subplots(figsize=(10, 6))

# Plot lines and confidence intervals
ax.plot(epochs, train_acc, label='Train Accuracy', color='blue', linewidth=2)
ax.fill_between(epochs, train_acc - train_std, train_acc + train_std, color='blue', alpha=0.2)

ax.plot(epochs, val_acc, label='Validation Accuracy', color='orange', linewidth=2)
ax.fill_between(epochs, val_acc - val_std, val_acc + val_std, color='orange', alpha=0.2)

# Early stopping marker
ax.axvline(x=early_stop_epoch, linestyle='--', color='gray', linewidth=1.5, label='Early Stopping')
ax.scatter(early_stop_epoch, early_stop_val, color='red', s=80, zorder=5)
ax.text(early_stop_epoch + 1, early_stop_val - 0.02, f"Early Stop\nEpoch {early_stop_epoch}",
        fontsize=11, color='red', fontweight='bold')

# Max val accuracy annotation
ax.scatter(max_val_epoch, max_val, color='green', s=80, zorder=5)
ax.text(max_val_epoch - 4, max_val + 0.015, f"Max Val Acc\n{max_val:.2%}",
        fontsize=11, color='green', fontweight='bold')

# Enhanced title
ax.set_title("Training and Validation Accuracy with Confidence Intervals\nand Early Stopping Highlight",
             fontsize=16, fontweight='bold', pad=20)

# Axis labels
ax.set_xlabel("Epoch", fontsize=14, fontweight='bold')
ax.set_ylabel("Accuracy", fontsize=14, fontweight='bold')
ax.tick_params(axis='both', labelsize=12)

# Legend and grid
ax.legend(fontsize=12)
ax.grid(True)

# Tight layout and high-res save
plt.tight_layout()
plt.savefig("accuracy_plot_title_caption.png", dpi=300)

# OPTIONAL: Add caption below the figure for paper formatting (outside plot)
print("Figure: Evolution of training and validation accuracy over epochs. The shaded region shows the confidence interval. Early stopping occurred at epoch 18, and the highest validation accuracy was observed at epoch {}.".format(max_val_epoch))

plt.show()

import matplotlib.pyplot as plt
import numpy as np
from matplotlib.ticker import PercentFormatter
import seaborn as sns

# Apply a consistent scientific paper-friendly style
sns.set_style("whitegrid")
sns.set_context("paper", font_scale=1.3)

# Dummy data (replace with real values)
epochs = np.arange(1, 56)
train_acc = np.random.normal(0.96, 0.01, size=len(epochs))
val_acc = np.random.normal(0.95, 0.015, size=len(epochs))
train_std = np.random.uniform(0.003, 0.008, size=len(epochs))
val_std = np.random.uniform(0.004, 0.009, size=len(epochs))

# Early stopping info
early_stop_epoch = 18
early_stop_val = val_acc[early_stop_epoch - 1]

# Max val accuracy
max_val_idx = np.argmax(val_acc)
max_val_epoch = epochs[max_val_idx]
max_val = val_acc[max_val_idx]

# Plotting
fig, ax = plt.subplots(figsize=(10, 6))

# Plot accuracy curves
ax.plot(epochs, train_acc, label='Train Accuracy', color='tab:blue', linewidth=2)
ax.fill_between(epochs, train_acc - train_std, train_acc + train_std, color='tab:blue', alpha=0.2)

ax.plot(epochs, val_acc, label='Validation Accuracy', color='tab:orange', linewidth=2)
ax.fill_between(epochs, val_acc - val_std, val_acc + val_std, color='tab:orange', alpha=0.2)

# Add early stopping marker
ax.axvline(x=early_stop_epoch, linestyle='--', color='gray', linewidth=1.5, label='Early Stopping')
ax.scatter(early_stop_epoch, early_stop_val, color='red', s=80, zorder=5)
ax.text(early_stop_epoch + 1, early_stop_val - 0.02, f"Early Stop\nEpoch {early_stop_epoch}",
        fontsize=11, color='red', fontweight='bold')

# Annotate max validation accuracy
ax.scatter(max_val_epoch, max_val, color='green', s=80, zorder=5)
ax.text(max_val_epoch - 4, max_val + 0.015, f"Max Val Acc\n{max_val:.2%}",
        fontsize=11, color='green', fontweight='bold')

# Set axis labels
ax.set_xlabel("Epoch", fontsize=14, fontweight='bold')
ax.set_ylabel("Accuracy", fontsize=14, fontweight='bold')

# Scientific formatting (percent)
ax.yaxis.set_major_formatter(PercentFormatter(xmax=1.0))
ax.tick_params(axis='both', labelsize=12)

# Title and legend
ax.set_title("Model Accuracy with Scientific Formatting and Confidence Intervals", fontsize=16, fontweight='bold')
ax.legend(fontsize=12)
ax.grid(True)

# Save and show
plt.tight_layout()
plt.savefig("accuracy_plot_scientific_formatting.png", dpi=300)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
from matplotlib.ticker import PercentFormatter

# Dummy data (replace with actual model results)
epochs = np.arange(1, 56)
train_acc = np.random.normal(0.96, 0.01, size=len(epochs))
val_acc = np.random.normal(0.95, 0.015, size=len(epochs))
train_std = np.random.uniform(0.003, 0.008, size=len(epochs))
val_std = np.random.uniform(0.004, 0.009, size=len(epochs))

# Early stopping info
early_stop_epoch = 18
early_stop_val = val_acc[early_stop_epoch - 1]

# Max validation accuracy info
max_val_idx = np.argmax(val_acc)
max_val_epoch = epochs[max_val_idx]
max_val = val_acc[max_val_idx]

# Create plot
fig, ax = plt.subplots(figsize=(10, 6))

# Plot accuracy with shaded intervals
ax.plot(epochs, train_acc, label='Train Accuracy', color='navy', linewidth=2)
ax.fill_between(epochs, train_acc - train_std, train_acc + train_std, color='navy', alpha=0.2)

ax.plot(epochs, val_acc, label='Validation Accuracy', color='darkorange', linewidth=2)
ax.fill_between(epochs, val_acc - val_std, val_acc + val_std, color='darkorange', alpha=0.2)

# Early stopping marker
ax.axvline(x=early_stop_epoch, linestyle='--', color='gray', linewidth=1.5, label='Early Stopping')
ax.scatter(early_stop_epoch, early_stop_val, color='red', s=80, zorder=5)
ax.text(early_stop_epoch + 1, early_stop_val - 0.02, f"Early Stop\nEpoch {early_stop_epoch}",
        fontsize=11, color='red', fontweight='bold')

# Max validation accuracy annotation
ax.scatter(max_val_epoch, max_val, color='green', s=80, zorder=5)
ax.text(max_val_epoch - 4, max_val + 0.015, f"Max Val Acc\n{max_val:.2%}",
        fontsize=11, color='green', fontweight='bold')

# Axis labels and title
ax.set_xlabel("Epoch", fontsize=14, fontweight='bold')
ax.set_ylabel("Accuracy", fontsize=14, fontweight='bold')
ax.set_title("Train and Validation Accuracy with Proper Layout and DPI", fontsize=16, fontweight='bold')

# Use percentage format for accuracy
ax.yaxis.set_major_formatter(PercentFormatter(1.0))
ax.tick_params(axis='both', labelsize=12)

# Legend and grid
ax.legend(fontsize=12)
ax.grid(True)

# Tight layout to avoid clipping and high-res save
plt.tight_layout()
plt.savefig("accuracy_plot_tight_dpi300.png", dpi=300)  # Ensures it's clean in paper/PDF
plt.show()

import matplotlib.pyplot as plt
import numpy as np
from matplotlib.ticker import PercentFormatter
import seaborn as sns

# Set a clean, readable journal-like style
sns.set_style("whitegrid")
sns.set_context("paper", font_scale=1.3)

# Use a colorblind-friendly palette (Seaborn or Colorcet if installed)
color_palette = sns.color_palette("colorblind")

# Dummy data (replace with real training values)
epochs = np.arange(1, 56)
train_acc = np.random.normal(0.96, 0.01, size=len(epochs))
val_acc = np.random.normal(0.95, 0.015, size=len(epochs))
train_std = np.random.uniform(0.003, 0.008, size=len(epochs))
val_std = np.random.uniform(0.004, 0.009, size=len(epochs))

# Early stopping and max accuracy info
early_stop_epoch = 18
early_stop_val = val_acc[early_stop_epoch - 1]

max_val_idx = np.argmax(val_acc)
max_val_epoch = epochs[max_val_idx]
max_val = val_acc[max_val_idx]

# Start plotting
fig, ax = plt.subplots(figsize=(10, 6))

# Plot training and validation accuracy with colorblind-friendly colors
ax.plot(epochs, train_acc, label='Train Accuracy', color=color_palette[0], linewidth=2)
ax.fill_between(epochs, train_acc - train_std, train_acc + train_std, color=color_palette[0], alpha=0.2)

ax.plot(epochs, val_acc, label='Validation Accuracy', color=color_palette[1], linewidth=2)
ax.fill_between(epochs, val_acc - val_std, val_acc + val_std, color=color_palette[1], alpha=0.2)

# Early stopping marker
ax.axvline(x=early_stop_epoch, linestyle='--', color='gray', linewidth=1.5, label='Early Stopping')
ax.scatter(early_stop_epoch, early_stop_val, color='red', s=80, zorder=5)
ax.text(early_stop_epoch + 1, early_stop_val - 0.02, f"Early Stop\nEpoch {early_stop_epoch}",
        fontsize=11, color='red', fontweight='bold')

# Max val accuracy annotation
ax.scatter(max_val_epoch, max_val, color='green', s=80, zorder=5)
ax.text(max_val_epoch - 4, max_val + 0.015, f"Max Val Acc\n{max_val:.2%}",
        fontsize=11, color='green', fontweight='bold')

# Axis, title, and legend
ax.set_xlabel("Epoch", fontsize=14, fontweight='bold')
ax.set_ylabel("Accuracy", fontsize=14, fontweight='bold')
ax.set_title("Accuracy Over Epochs with Colorblind-Friendly Palette", fontsize=16, fontweight='bold')

ax.yaxis.set_major_formatter(PercentFormatter(1.0))
ax.tick_params(axis='both', labelsize=12)
ax.legend(fontsize=12)
ax.grid(True)

# Layout and high-res output
plt.tight_layout()
plt.savefig("accuracy_plot_colorblind_friendly.png", dpi=300)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Dummy data
x = np.linspace(0, 2.2e6, 2200)
y = np.random.normal(0, 50, size=len(x))

# Highlight ranges (replace with actual range indices)
rm_range = (0, 1e5)
sbox_range = (1.4e6, 1.55e6)
rin_perm_range = (1.55e6, 2.1e6)

# Plot setup
plt.figure(figsize=(12, 5))
plt.plot(x, y, label="Complete Trace", color='steelblue', linewidth=1)

# Transparent overlays
plt.axvspan(*rm_range, color='coral', alpha=0.4, label='$r_m$')
plt.axvspan(*sbox_range, color='gold', alpha=0.5, label='sbox_in')
plt.axvspan(*rin_perm_range, color='maroon', alpha=0.4, label='$r_{in}$ & perm')

# Vertical lines to mark events
plt.axvline(rm_range[1], color='gray', linestyle='--', linewidth=1)
plt.axvline(sbox_range[0], color='gray', linestyle='--', linewidth=1)
plt.axvline(rin_perm_range[0], color='gray', linestyle='--', linewidth=1)

# Labels inside spans
plt.text(rm_range[0] + 2e4, 120, '$r_m$', fontsize=12, fontweight='bold', color='black')
plt.text(sbox_range[0] + 2e4, 120, 'sbox_in', fontsize=12, fontweight='bold', color='black')
plt.text(rin_perm_range[0] + 2e4, 120, '$r_{in}$ & perm', fontsize=12, fontweight='bold', color='black')

# Axis and labels
plt.xlabel("Time (Samples)", fontsize=14, fontweight='bold')
plt.ylabel("Amplitude", fontsize=14, fontweight='bold')
plt.title("Trace with Highlighted Cryptographic Operations", fontsize=16, fontweight='bold')

# Grid, legend, and layout
plt.grid(axis='y', linestyle='--', alpha=0.6)
plt.legend(loc='upper right', fontsize=11)
plt.tight_layout()
plt.savefig("trace_highlighted_clean.png", dpi=300)
plt.show()





